# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lsr)
library(ggcorrplot)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
###--------------------------------------------------------###
###------------------------LOAD DATA-----------------------###
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./Data')
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ' ', trim_ws = TRUE, na = c("", "NA"))
View(datainput)
View(datainput)
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lsr)
library(ggcorrplot)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
###--------------------------------------------------------###
###------------------------LOAD DATA-----------------------###
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./Data')
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ',', trim_ws = TRUE, na = c("", "NA"))
View(datainput)
View(datainput)
names(datainput)
partition(skim(datainput))
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./Data')
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ',', trim_ws = TRUE, na = c("", "NA", "?"))
#display information
names(datainput)
partition(skim(datainput))
names(datainput)
partition(skim(datainput))
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ',', trim_ws = TRUE, na = c("", "NA", "?"))
#display information
names(datainput)
partition(skim(datainput))
#rename
colnames(datainput) <- c("X1",  "X2",  "X3",  "X4",  "X5",  "X6",  "X7",  "X8",  "X9",  "X10",
"X11", "X12", "X13", "X14", "X15", "Approval")
skim(datainput)
#rename
colnames(datainput) <- c("X1",  "X2",  "X3",  "X4",  "X5",  "X6",  "X7",  "X8",  "X9",  "X10",
"X11", "X12", "X13", "X14", "X15", "Approval")
#transform (https://juba.github.io/tidyverse/07-import.html )
# (https://juba.github.io/tidyverse/09-recodages.html)
# (http://larmarange.github.io/analyse-R/recodage.html)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 0L, `-` = 1L, .default = 1L))
skim(datainput)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 0L, `-` = 1L, .default = 1L)) %>%
as.integer(X11)
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lsr)
library(ggcorrplot)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
###--------------------------------------------------------###
###------------------------LOAD DATA-----------------------###
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./Data')
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ',', trim_ws = TRUE, na = c("", "NA", "?"))
#display information
names(datainput)
skim(datainput)
#rename
colnames(datainput) <- c("X1",  "X2",  "X3",  "X4",  "X5",  "X6",  "X7",  "X8",  "X9",  "X10",
"X11", "X12", "X13", "X14", "X15", "Approval")
#transform (https://juba.github.io/tidyverse/07-import.html )
# (https://juba.github.io/tidyverse/09-recodages.html)
# (http://larmarange.github.io/analyse-R/recodage.html)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 0L, `-` = 1L, .default = 1L)) %>%
###--------------------------------------------------------###
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputcor <- datainput  %>%
select (-c(Approval))
# function to get chi square p value and Cramers V
fCramerFunction = function(x,y) {
tbl = datainputcor %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# create unique combinations of column names
# sorting will help getting a better plot (upper triangular)
df_comb = data.frame(t(combn(sort(names(datainputcor)), 2)), stringsAsFactors = F)
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, fCramerFunction)
# plot results
df_res %>%
#ggplot(aes(x,y,fill=chisq_pval))+
ggplot(aes(x,y,fill=cramV))+
geom_tile()+
geom_text(aes(x,y,label=cramV))+
scale_fill_gradient(low="red", high="yellow")+
theme_classic()
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lsr)
library(ggcorrplot)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
###--------------------------------------------------------###
###------------------------LOAD DATA-----------------------###
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./Data')
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ',', trim_ws = TRUE, na = c("", "NA", "?"))
#display information
names(datainput)
skim(datainput)
#rename
colnames(datainput) <- c("X1",  "X2",  "X3",  "X4",  "X5",  "X6",  "X7",  "X8",  "X9",  "X10",
"X11", "X12", "X13", "X14", "X15", "Approval")
#transform (https://juba.github.io/tidyverse/07-import.html )
# (https://juba.github.io/tidyverse/09-recodages.html)
# (http://larmarange.github.io/analyse-R/recodage.html)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 1L, `-` = 0L, .default = 1L))
###--------------------------------------------------------###
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputcor <- datainput  %>%
select (-c(Approval))
# function to get chi square p value and Cramers V
fCramerFunction = function(x,y) {
tbl = datainputcor %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# create unique combinations of column names
# sorting will help getting a better plot (upper triangular)
df_comb = data.frame(t(combn(sort(names(datainputcor)), 2)), stringsAsFactors = F)
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, fCramerFunction)
# plot results
df_res %>%
#ggplot(aes(x,y,fill=chisq_pval))+
ggplot(aes(x,y,fill=cramV))+
geom_tile()+
geom_text(aes(x,y,label=cramV))+
scale_fill_gradient(low="red", high="yellow")+
theme_classic()
#if you want to have a genuine correlation plot for factors or mixed-type, you can also use model.matrix
#to one-hot encode all non-numeric variables. This is quite different than calculating Cramér's V as
#it will consider your factor as separate variables, as many regression models do.
model.matrix(~0+., data=datainputcor) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
###--------------------------------------------------------###
datainputcor <- datainput  %>%
select (-c(Approval))
# function to get chi square p value and Cramers V
fCramerFunction = function(x,y) {
tbl = datainputcor %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# create unique combinations of column names
# sorting will help getting a better plot (upper triangular)
df_comb = data.frame(t(combn(sort(names(datainputcor)), 2)), stringsAsFactors = F)
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, fCramerFunction)
# plot results
df_res %>%
#ggplot(aes(x,y,fill=chisq_pval))+
ggplot(aes(x,y,fill=cramV))+
geom_tile()+
geom_text(aes(x,y,label=cramV))+
scale_fill_gradient(low="red", high="yellow")+
theme_classic()
View(datainput)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 1L, `-` = 0L, .default = 1L)) %>%
as.integer(X11)
#Connaitre le nombre de valeurs différentes dans chaque colonnes
sapply(dataset, function(x) length(unique(x)))
#Connaitre le nombre de valeurs différentes dans chaque colonnes
sapply(datainput, function(x) length(unique(x)))
library(Amelia)
library(Amelia)
missmap(datainput, main = "Missing values vs observed")
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 1L, `-` = 0L, .default = 1L)) %>%
mutate(X11 = as.integer(X11))
View(datainput)
names(datainput)
skim(datainput)
#Connaitre le nombre de valeurs différentes dans chaque colonnes
sapply(datainput, function(x) length(unique(x)))
missmap(datainput, main = "Missing values vs observed")
#rename
colnames(datainput) <- c("X1",  "X2",  "X3",  "X4",  "X5",  "X6",  "X7",  "X8",  "X9",  "X10",
"X11", "X12", "X13", "X14", "X15", "Approval")
#transform (https://juba.github.io/tidyverse/07-import.html )
# (https://juba.github.io/tidyverse/09-recodages.html)
# (http://larmarange.github.io/analyse-R/recodage.html)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 1L, `-` = 0L, .default = 1L)) %>%
mutate(X11 = as.integer(X11))
skim(datainput)
clear
clean
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lsr)
library(ggcorrplot)
library(Amelia)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
###--------------------------------------------------------###
###------------------------LOAD DATA-----------------------###
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./Data')
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ',', trim_ws = TRUE, na = c("", "NA", "?"))
#display information
names(datainput)
skim(datainput)
#Connaitre le nombre de valeurs différentes dans chaque colonnes
sapply(datainput, function(x) length(unique(x)))
missmap(datainput, main = "Missing values vs observed")
#rename
colnames(datainput) <- c("X1",  "X2",  "X3",  "X4",  "X5",  "X6",  "X7",  "X8",  "X9",  "X10",
"X11", "X12", "X13", "X14", "X15", "Approval")
#transform (https://juba.github.io/tidyverse/07-import.html )
# (https://juba.github.io/tidyverse/09-recodages.html)
# (http://larmarange.github.io/analyse-R/recodage.html)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 1L, `-` = 0L, .default = 1L)) %>%
mutate(X11 = as.integer(X11))
skim(datainput)
