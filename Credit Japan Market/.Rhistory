var_simple_glm = c("Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response"), 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
summary(var_simple_glm) # display results
exp(coef(var_simple_glm)) # exponentiated coefficients
predict(var_simple_glm, type="response") # predicted values
residuals(var_simple_glm, type="deviance") # residuals
anova(model_glm, var_simple_glm, test="Chisq")
simple_logit_model
summary(var_simple_glm) # display results
summary(var_simple_glm)
var_simple_glm
summary(simple_logit_model) # display results
summary(simple_logit_model) # display results
exp(coef(simple_logit_model)) # exponentiated coefficients
predict(simple_logit_model, type="response") # predicted values
residuals(simple_logit_model, type="deviance") # residuals
exp(coef(simple_logit_model)) # exponentiated coefficients
predict(simple_logit_model, type="response") # predicted values
predict(simple_logit_model, newdata = training1_TEST, type = "response")
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
test_prob_simple = as.logical(round(predict(simple_logit_model, newdata = training1_TEST, type = "response"), 0))
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lubridate)
library(data.table) # data mgmt
library(gtools) # combination
library(ggplot2) # graphics
library(plotly) # interactive graphics
library(lsr)
library(mltools)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./data')
datainput = read_delim('./data/train2.csv', col_names = TRUE, delim = ',')
colnames <- names(datainput)
#display information
names(datainput)
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputreduced <- datainput  %>%
select (ltv, Date.of.Birth, Employment.Type, PERFORM_CNS.SCORE.DESCRIPTION, DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS, loan_default)
partition(skim(datainputreduced))
thisyear = year(Sys.Date())
datainputreduced <- datainputreduced %>%
mutate(NbrYear = thisyear-year(dmy(Date.of.Birth)))
##Analyse univariée
hist(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
boxplot(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
ylab = "Heures")
##split
# Resulting bins have an equal number of observations in each group
datainputreduced[, "wt2"] <- bin_data(datainputreduced$NbrYear, bins=3, binType = "quantile")
#creating indices
trainIndex <- createDataPartition(datainputreduced$loan_default,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
training1_TRAIN <- datainputreduced[trainIndex,] #training data (75% of data)
training1_TEST <- datainputreduced[-trainIndex,] #testing data (25% of data)
var_simple_glm = c("Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response"), 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
summary(simple_logit_model) # display results
exp(coef(simple_logit_model)) # exponentiated coefficients
predict(simple_logit_model, type="response") # predicted values
residuals(simple_logit_model, type="deviance") # residuals
anova(model_glm, simple_logit_model, test="Chisq")
View(training1_TEST)
View(training1_TEST)
test_prob_simple
predict(simple_logit_model, newdata = training1_TEST, type = "response")
training1_TEST["199"]
training1_TEST[199]
View(training1_TEST)
View(training1_TEST)
View(test_roc_simple)
test_prob_simple[0]
test_prob_simple[1]
test_prob_simple[2]
test_prob_simple[,2]
test_prob_simple[0,2]
test_prob_simple[,2]
test_prob_simple[2]
test_prob_simple[2]+1
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lubridate)
library(data.table) # data mgmt
library(gtools) # combination
library(ggplot2) # graphics
library(plotly) # interactive graphics
library(lsr)
library(mltools)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./data')
datainput = read_delim('./data/train2.csv', col_names = TRUE, delim = ',')
colnames <- names(datainput)
#display information
names(datainput)
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputreduced <- datainput  %>%
select (ltv, Date.of.Birth, Employment.Type, PERFORM_CNS.SCORE.DESCRIPTION, DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS, loan_default)
partition(skim(datainputreduced))
thisyear = year(Sys.Date())
datainputreduced <- datainputreduced %>%
mutate(NbrYear = thisyear-year(dmy(Date.of.Birth)))
##Analyse univariée
hist(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
boxplot(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
ylab = "Heures")
##split
# Resulting bins have an equal number of observations in each group
datainputreduced[, "wt2"] <- bin_data(datainputreduced$NbrYear, bins=3, binType = "quantile")
#creating indices
trainIndex <- createDataPartition(datainputreduced$loan_default,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
training1_TRAIN <- datainputreduced[trainIndex,] #training data (75% of data)
training1_TEST <- datainputreduced[-trainIndex,] #testing data (25% of data)
var_simple_glm = c("Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(model_glm, newdata = training1_TEST, type = "response")+0.1, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
summary(simple_logit_model) # display results
exp(coef(simple_logit_model)) # exponentiated coefficients
predict(simple_logit_model, type="response") # predicted values
residuals(simple_logit_model, type="deviance") # residuals
anova(model_glm, simple_logit_model, test="Chisq")
test_prob_simple
predict(model_glm, newdata = training1_TEST, type = "response")+0.1
predict(model_glm, newdata = training1_TEST, type = "response")
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lubridate)
library(data.table) # data mgmt
library(gtools) # combination
library(ggplot2) # graphics
library(plotly) # interactive graphics
library(lsr)
library(mltools)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./data')
datainput = read_delim('./data/train2.csv', col_names = TRUE, delim = ',')
colnames <- names(datainput)
#display information
names(datainput)
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputreduced <- datainput  %>%
select (ltv, Date.of.Birth, Employment.Type, PERFORM_CNS.SCORE.DESCRIPTION, DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS, loan_default)
partition(skim(datainputreduced))
thisyear = year(Sys.Date())
datainputreduced <- datainputreduced %>%
mutate(NbrYear = thisyear-year(dmy(Date.of.Birth)))
##Analyse univariée
hist(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
boxplot(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
ylab = "Heures")
##split
# Resulting bins have an equal number of observations in each group
datainputreduced[, "wt2"] <- bin_data(datainputreduced$NbrYear, bins=3, binType = "quantile")
#creating indices
trainIndex <- createDataPartition(datainputreduced$loan_default,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
training1_TRAIN <- datainputreduced[trainIndex,] #training data (75% of data)
training1_TEST <- datainputreduced[-trainIndex,] #testing data (25% of data)
var_simple_glm = c("Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(var_simple_glm, newdata = training1_TEST, type = "response")+0.1, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
summary(simple_logit_model) # display results
exp(coef(simple_logit_model)) # exponentiated coefficients
predict(simple_logit_model, type="response") # predicted values
residuals(simple_logit_model, type="deviance") # residuals
anova(model_glm, simple_logit_model, test="Chisq")
predict(var_simple_glm, newdata = training1_TEST, type = "response")+0.1
predict(var_simple_glm, newdata = training1_TEST, type = "response")
hist(predict(simple_logit_model, newdata = training1_TEST, type = "loan_default"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
hist(predict(simple_logit_model, newdata = training1_TEST, type = "loan_default"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lubridate)
library(data.table) # data mgmt
library(gtools) # combination
library(ggplot2) # graphics
library(plotly) # interactive graphics
library(lsr)
library(mltools)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./data')
datainput = read_delim('./data/train2.csv', col_names = TRUE, delim = ',')
colnames <- names(datainput)
#display information
names(datainput)
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputreduced <- datainput  %>%
select (ltv, Date.of.Birth, Employment.Type, PERFORM_CNS.SCORE.DESCRIPTION, DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS, loan_default)
partition(skim(datainputreduced))
thisyear = year(Sys.Date())
datainputreduced <- datainputreduced %>%
mutate(NbrYear = thisyear-year(dmy(Date.of.Birth)))
##Analyse univariée
hist(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
boxplot(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
ylab = "Heures")
##split
# Resulting bins have an equal number of observations in each group
datainputreduced[, "wt2"] <- bin_data(datainputreduced$NbrYear, bins=3, binType = "quantile")
#creating indices
trainIndex <- createDataPartition(datainputreduced$loan_default,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
training1_TRAIN <- datainputreduced[trainIndex,] #training data (75% of data)
training1_TEST <- datainputreduced[-trainIndex,] #testing data (25% of data)
var_simple_glm = c("Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "loan_default"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "loan_default")+0.1, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
summary(simple_logit_model) # display results
exp(coef(simple_logit_model)) # exponentiated coefficients
predict(simple_logit_model, type="response") # predicted values
residuals(simple_logit_model, type="deviance") # residuals
anova(model_glm, simple_logit_model, test="Chisq")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "loan_default")+0.1, 0)
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.1, 0)
test_prob_simple
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0,4, 0)
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.4, 0)
test_prob_simple
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.2, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
test_prob_simple
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple, plot = TRUE, print.auc = TRUE)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.3, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.1, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.5, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
simple_logit_model
summary(simple_logit_model)
var_simple_glm = c("Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
var_simple_glm = c("Employment.Type", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response"), 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
var_simple_glm = c("Employment.Type", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
summary(simple_logit_model) # display results
exp(coef(simple_logit_model)) # exponentiated coefficients
View(training1_TRAIN)
View(training1_TRAIN)
View(training1_TRAIN)
View(training1_TRAIN)
var_simple_glm = c("PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
#"Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv"
var_simple_glm = c("PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response"), 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
var_simple_glm = c("PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
#"Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv"
var_simple_glm = c("PERFORM_CNS.SCORE.DESCRIPTION","PRI.CURRENT.BALANCE","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
var_simple_glm = c("PERFORM_CNS.SCORE.DESCRIPTION","PRI.CURRENT.BALANCE","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv","PRI.CURRENT.BALANCE, PRI.ACTIVE.ACCTS")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lubridate)
library(data.table) # data mgmt
library(gtools) # combination
library(ggplot2) # graphics
library(plotly) # interactive graphics
library(lsr)
library(mltools)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./data')
datainput = read_delim('./data/train2.csv', col_names = TRUE, delim = ',')
colnames <- names(datainput)
#display information
names(datainput)
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputreduced <- datainput  %>%
select (ltv, Date.of.Birth, Employment.Type, PERFORM_CNS.SCORE.DESCRIPTION, DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS, loan_default, PRI.CURRENT.BALANCE, PRI.ACTIVE.ACCTS)
partition(skim(datainputreduced))
thisyear = year(Sys.Date())
datainputreduced <- datainputreduced %>%
mutate(NbrYear = thisyear-year(dmy(Date.of.Birth)))
##Analyse univariée
hist(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
boxplot(datainputreduced$NbrYear, main = "Nombre d'heures passées devant la télé par jour",
ylab = "Heures")
##split
# Resulting bins have an equal number of observations in each group
datainputreduced[, "wt2"] <- bin_data(datainputreduced$NbrYear, bins=3, binType = "quantile")
#creating indices
trainIndex <- createDataPartition(datainputreduced$loan_default,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
training1_TRAIN <- datainputreduced[trainIndex,] #training data (75% of data)
training1_TEST <- datainputreduced[-trainIndex,] #testing data (25% of data)
#"Employment.Type","PERFORM_CNS.SCORE.DESCRIPTION","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv"
var_simple_glm = c("PERFORM_CNS.SCORE.DESCRIPTION","PRI.CURRENT.BALANCE","DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS", "wt2", "ltv","PRI.CURRENT.BALANCE", "PRI.ACTIVE.ACCTS")
simple_logit_model = glm(reformulate(termlabels = var_simple_glm, response = "loan_default"),
data = training1_TRAIN, family = binomial(link = "logit"))
hist(predict(simple_logit_model, newdata = training1_TEST, type = "response"),
main = "Nombre d'heures passées devant la télé par jour",
xlab = "Heures", ylab = "Effectif")
test_prob_simple = round(predict(simple_logit_model, newdata = training1_TEST, type = "response")+0.25, 0)
test_roc_simple = roc(training1_TEST$loan_default ~ test_prob_simple,levels = c(0, 1), direction = "<", plot = TRUE, print.auc = TRUE)
summary(simple_logit_model) # display results
exp(coef(simple_logit_model)) # exponentiated coefficients
predict(simple_logit_model, type="response") # predicted values
residuals(simple_logit_model, type="deviance") # residuals
anova(model_glm, simple_logit_model, test="Chisq")
# load useful libraries
library(pacman)
library(tidyverse)
library(skimr)
library(dplyr)
library(caret)
library(pROC)
library(recipes) # could also load the tidymodels package
library(corrplot)
library(lsr)
library(ggcorrplot)
library(Amelia)
#seed for replication
set.seed(7)
# set up so that all variables of tibbles are printed
options(dplyr.width = Inf)
###--------------------------------------------------------###
###------------------------LOAD DATA-----------------------###
#make the working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('./Data')
datainput = read_delim('./Data/crx.data', col_names = FALSE, delim =  ',', trim_ws = TRUE, na = c("", "NA", "?"))
#display information
names(datainput)
skim(datainput)
#Connaitre le nombre de valeurs différentes dans chaque colonnes
sapply(datainput, function(x) length(unique(x)))
missmap(datainput, main = "Missing values vs observed")
#rename
colnames(datainput) <- c("X1",  "X2",  "X3",  "X4",  "X5",  "X6",  "X7",  "X8",  "X9",  "X10",
"X11", "X12", "X13", "X14", "X15", "Approval")
#transform (https://juba.github.io/tidyverse/07-import.html )
# (https://juba.github.io/tidyverse/09-recodages.html)
# (http://larmarange.github.io/analyse-R/recodage.html)
datainput <- datainput %>%
mutate(Approval = recode(Approval , `+` = 1L, `-` = 0L, .default = 1L)) %>%
mutate(X11 = as.integer(X11)) %>%
mutate(X14 = as.integer(X14))
skim(datainput)
###--------------------------------------------------------###
###--------------------------------------------------------###
###----------------- Analyse of correlation ---------------###
datainputcor <- datainput  %>%
select (-c(Approval))
# function to get chi square p value and Cramers V
fCramerFunction = function(x,y) {
tbl = datainputcor %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# create unique combinations of column names
# sorting will help getting a better plot (upper triangular)
df_comb = data.frame(t(combn(sort(names(datainputcor)), 2)), stringsAsFactors = F)
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, fCramerFunction)
# plot results
df_res %>%
#ggplot(aes(x,y,fill=chisq_pval))+
ggplot(aes(x,y,fill=cramV))+
geom_tile()+
geom_text(aes(x,y,label=cramV))+
scale_fill_gradient(low="red", high="yellow")+
theme_classic()
